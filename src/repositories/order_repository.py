from src.base.session import Session
from src.base.repository_base import RepositoryBase
import entities.entities
import src.repositories.order_line_repository


class OrderRepository(RepositoryBase):
    __table__ = entities.entities.Order
    order_line_repo: src.repositories.order_line_repository.OrderLineRepository

    def __init__(self, order_line_repo: src.repositories.order_line_repository.OrderLineRepository):
        self.order_line_repo = order_line_repo

    def get_by_id(self, session: Session, id: int):
        item: entities.entities.Order = self._get_by_id(session, {"id": id})
        item.order_line = self.order_line_repo.get_for_order(session, item.id)
        return item

    def exists(self, session: Session, id: int):
        return self._item_exists(session, {"id": id})

    def delete(self, session: Session, id: int):
        self._delete(session, {"id": id})

    def add(self, session: Session, item: entities.entities.Order):
        id = self._execute_lastrowid(session, item.__insert_script__, item.get_insert_params())
        item.id = id
        for order_line in item.order_lines:
            order_line.order_id = id
            self.order_line_repo.add(session, order_line)

    def get_for_order_status(self, session: Session, order_status_id):
        result = self.fetch(session, "select select \"id\", \"customerid\", \"createdate\", \"orderstatusid\", "
                                     "\"totalprice\" from \"order\" where \"orderstatusid\" = :orderstatusid;",
                            {"orderstatusid": order_status_id})
        return result

    def get_for_customer(self, session: Session, customer_id):
        result = self.fetch(session, "select select \"id\", \"customerid\", \"createdate\", \"orderstatusid\", "
                                     "\"totalprice\" from \"order\" where \"customerid\" = :customerid;",
                            {"customerid": customer_id})
        return result

# end-autogenerated
