from src.base.session import Session
from src.base.repository_base import RepositoryBase
import entities.entities


class OrderStatusRepository(RepositoryBase):
    __table__ = entities.entities.OrderStatus

    def __init__(self):
        ...

    def get_by_id(self, session: Session, id: int):
        item: entities.entities.OrderStatus = self._get_by_id(session, {"id": id})
        return item

    def exists(self, session: Session, id: int):
        return self._item_exists(session, {"id": id})

    def delete(self, session: Session, id: int):
        self._delete(session, {"id": id})

    def add(self, session: Session, item: entities.entities.OrderStatus):
        id = self._execute_lastrowid(session, item.__insert_script__, item.get_insert_params())
        item.id = id

# end-autogenerated
    def get_by_name(self, session: Session, name: str):
        row = self._fetch_one(session, "select \"id\", \"value\" from \"orderstatus\" where \"value\" = :name;", {"name": name})
        if not row:
            return None

        item: entities.entities.OrderStatus = self.__table__().map_row(row)
        return item