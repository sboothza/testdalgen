from datetime import datetime

from src.base.session import Session
from src.base.repository_base import RepositoryBase
import entities.entities
import src.repositories.customer_region_repository


class RegionRepository(RepositoryBase):
    __table__ = entities.entities.Region
    customer_region_repo: src.repositories.customer_region_repository.CustomerRegionRepository

    def __init__(self, customer_region_repo: src.repositories.customer_region_repository.CustomerRegionRepository):
        self.customer_region_repo = customer_region_repo

    def get_by_id(self, session: Session, id: int):
        item: entities.entities.Region = self._get_by_id(session, {"id": id})
        item.customers = self.customer_region_repo.get_customers(session, item)
        return item

    def exists(self, session: Session, id: int):
        return self._item_exists(session, {"id": id})

    def delete(self, session: Session, id: int):
        item = self.get_by_id(id)
        for customer in item.customers:
            self.customer_region_repo.delete(session, {"customerid": customer.id, "regionid": item.id})

        self._delete(session, {"id": id})

    def add(self, session: Session, item: entities.entities.Region):
        id = self._execute_lastrowid(session, item.__insert_script__, item.get_insert_params())
        item.id = id

        for customer in item.customers:
            customer_region = entities.entities.CustomerRegion(customer.id, item.id)
            self.customer_region_repo.add(session, customer_region)

# end-autogenerated
