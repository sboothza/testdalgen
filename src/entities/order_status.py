from src.base.table_base import TableBase


class OrderStatus(TableBase):
    __table_name__ = "orderstatus"
    __drop_script__ = """drop table "orderstatus";"""
    __create_script__ = """create table "orderstatus" ("id" INT NOT NULL GENERATED ALWAYS AS IDENTITY, "value" VARCHAR(100) NOT NULL, PRIMARY KEY (id));CREATE UNIQUE INDEX "orderstatus_UN" on "orderstatus" (value);"""
    __table_exists_script__ = """select tablename from pg_tables where schemaname = 'public' and tablename = 'orderstatus'"""
    __table_count_script__ = """select count(*) from "orderstatus";"""
    __insert_script__ = """insert into "orderstatus" ("value") values (%(value)s) RETURNING id;"""
    __update_script__ = """update "orderstatus" set "value" = %(value)s where "id" = %(id)s;"""
    __delete_script__ = """delete from "orderstatus" where "id" = %(id)s;"""
    __fetch_by_id_script__ = """select "id", "value" from "orderstatus" where "id" = %(id)s;"""
    __item_exists_script__ = """select count(*) from "orderstatus" where "id" = %(id)s;"""

    id: int = 0
    value: str = "None"

    def __init__(self, id: int = 0, value: str = "None"):
        self.id = id
        self.value = value

    @classmethod
    def map_row(cls, row) -> TableBase:
        return cls(row[0], row[1])

    def get_insert_params(self) -> {}:
        return {"value": self.value}

    def get_update_params(self) -> {}:
        return {"value": self.value, "id": self.id}

# end-autogenerated
