# from src.base.table_base import TableBase
#
#
# class Product(TableBase):
#     __table_name__ = "product"
#     __drop_script__ = "None"
#     __create_script__ = "create table \"product\" (\"id\" INTEGER ,\"name\" TEXT ,\"enabled\" INTEGER ,\"price\" REAL ,PRIMARY KEY (\"id\")); CREATE UNIQUE INDEX \"product_UN\" ON \"product\" (\"name\");"
#     __table_exists_script__ = "SELECT name FROM sqlite_schema WHERE type='table' and name = 'product'"
#     __table_count_script__ = "select count(*) from \"product\""
#     __insert_script__ = "insert into \"product\" (\"name\", \"enabled\", \"price\") values (:name, :enabled, :price);"
#     __update_script__ = "update \"product\" set \"name\" = :name, \"enabled\" = :enabled, \"price\" = :price where \"id\" = :id;"
#     __delete_script__ = "delete from \"product\" where \"id\" = :id;"
#     __fetch_by_id_script__ = "select \"id\", \"name\", \"enabled\", \"price\" from \"product\" where \"id\" = :id;"
#     __item_exists_script__ = "select count(*) from \"product\" where \"id\" = :id;"
#
#     id: int = 0
#     name: str = "None"
#     enabled: bool = True
#     price: float = 0
#
#     def __init__(self, id: int = 0, name: str = "None", enabled: bool = True, price: float = 0):
#         self.id = id
#         self.name = name
#         self.enabled = enabled
#         self.price = price
#
#     def map_row(self, row) -> TableBase:
#         self.id = row[0]
#         self.name = row[1]
#         self.enabled = TableBase.int_to_bool(row[2])
#         self.price = row[3]
#         return self
#
#     def get_insert_params(self) -> {}:
#         return {"name": self.name, "enabled": TableBase.bool_to_int(self.enabled), "price": self.price}
#
#     def get_update_params(self) -> {}:
#         return {"name": self.name, "enabled": TableBase.bool_to_int(self.enabled), "price": self.price, "id": self.id}
#
# # end-autogenerated
