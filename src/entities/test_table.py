from datetime import datetime
from src.base.table_base import TableBase


class TestTable(TableBase):
    __table_name__ = "test_table"
    __drop_script__ = "None"
    __create_script__ = "create table \"test_table\" (\"id\" INTEGER ,\"string_field\" TEXT ,\"string_field2\" TEXT ,\"int_field\" INTEGER ,\"float_field\" REAL ,\"bool_field\" INTEGER ,\"datetime_field\" REAL ,PRIMARY KEY (\"id\")); CREATE UNIQUE INDEX \"string_field\" ON \"test_table\" (\"string_field\"); CREATE INDEX \"string_field2\" ON \"test_table\" (\"string_field2\"); CREATE INDEX \"test_table_string_field_IDX\" ON \"test_table\" (\"string_field\",\"string_field2\");"
    __table_exists_script__ = "SELECT name FROM sqlite_schema WHERE type='table' and name = 'test_table'"
    __table_count_script__ = "select count(*) from \"test_table\""
    __insert_script__ = "insert into \"test_table\" (\"string_field\", \"string_field2\", \"int_field\", \"float_field\", \"bool_field\", \"datetime_field\") values (:string_field, :string_field2, :int_field, :float_field, :bool_field, :datetime_field);"
    __update_script__ = "update \"test_table\" set \"string_field\" = :string_field, \"string_field2\" = :string_field2, \"int_field\" = :int_field, \"float_field\" = :float_field, \"bool_field\" = :bool_field, \"datetime_field\" = :datetime_field where \"id\" = :id;"
    __delete_script__ = "delete from \"test_table\" where \"id\" = :id;"
    __fetch_by_id_script__ = "select \"id\", \"string_field\", \"string_field2\", \"int_field\", \"float_field\", \"bool_field\", \"datetime_field\" from \"test_table\" where \"id\" = :id;"
    __item_exists_script__ = "select count(*) from \"test_table\" where \"id\" = :id;"
    
    id: int = 0
    string_field: str = "None"
    string_field_2: str = "None"
    int_field: int = 0
    float_field: float = 0
    bool_field: bool = False
    date_time_field: datetime = datetime.min
    
    
    def __init__(self, id: int = 0, string_field: str = "None", string_field_2: str = "None", int_field: int = 0, float_field: float = 0, bool_field: bool = False, date_time_field: datetime = datetime.min):
        self.id = id
        self.string_field = string_field
        self.string_field_2 = string_field_2
        self.int_field = int_field
        self.float_field = float_field
        self.bool_field = bool_field
        self.date_time_field = date_time_field
    
    def map_row(self, row) -> TableBase:
        self.id = row[0]
        self.string_field = row[1]
        self.string_field_2 = row[2]
        self.int_field = row[3]
        self.float_field = row[4]
        self.bool_field = TableBase.int_to_bool(row[5])
        self.date_time_field = TableBase.float_to_datetime(row[6])
        return self
    
    def get_insert_params(self) -> {}:
        return {"string_field": self.string_field, "string_field2": self.string_field_2, "int_field": self.int_field, "float_field": self.float_field, "bool_field": TableBase.bool_to_int(self.bool_field), "datetime_field": TableBase.datetime_to_float(self.date_time_field)}
    
    def get_update_params(self) -> {}:
        return {"string_field": self.string_field, "string_field2": self.string_field_2, "int_field": self.int_field, "float_field": self.float_field, "bool_field": TableBase.bool_to_int(self.bool_field), "datetime_field": TableBase.datetime_to_float(self.date_time_field), "id": self.id}
    
# end-autogenerated
