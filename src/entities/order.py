# from datetime import datetime
# from typing import List
# from src.base.table_base import TableBase
# import src.entities.order_line
#
#
# class Order(TableBase):
#     __table_name__ = "order"
#     __drop_script__ = "None"
#     __create_script__ = "create table \"order\" (\"id\" INTEGER ,\"customerid\" INTEGER ,\"createdate\" REAL ,\"orderstatusid\" INTEGER ,\"totalprice\" REAL ,PRIMARY KEY (\"id\"),FOREIGN KEY (\"orderstatusid\") REFERENCES \"orderstatus\"(\"id\"),FOREIGN KEY (\"customerid\") REFERENCES \"customer\"(\"id\")); CREATE INDEX \"order_FK\" ON \"order\" (\"orderstatusid\"); CREATE INDEX \"order_FK_1\" ON \"order\" (\"customerid\");"
#     __table_exists_script__ = "SELECT name FROM sqlite_schema WHERE type='table' and name = 'order'"
#     __table_count_script__ = "select count(*) from \"order\""
#     __insert_script__ = "insert into \"order\" (\"customerid\", \"createdate\", \"orderstatusid\", \"totalprice\") values (:customerid, :createdate, :orderstatusid, :totalprice);"
#     __update_script__ = "update \"order\" set \"customerid\" = :customerid, \"createdate\" = :createdate, \"orderstatusid\" = :orderstatusid, \"totalprice\" = :totalprice where \"id\" = :id;"
#     __delete_script__ = "delete from \"order\" where \"id\" = :id;"
#     __fetch_by_id_script__ = "select \"id\", \"customerid\", \"createdate\", \"orderstatusid\", \"totalprice\" from \"order\" where \"id\" = :id;"
#     __item_exists_script__ = "select count(*) from \"order\" where \"id\" = :id;"
#
#     id: int = 0
#     customer_id: int = 0
#     create_date: datetime = datetime.min
#     order_status_id: int = 0
#     total_price: float = 0
#
#     order_lines: List[src.entities.order_line.OrderLine]  # orderline_FK
#
#     def __init__(self, id: int = 0, customer_id: int = 0, create_date: datetime = datetime.min,
#                  order_status_id: int = 0, total_price: float = 0):
#         self.id = id
#         self.customer_id = customer_id
#         self.create_date = create_date
#         self.order_status_id = order_status_id
#         self.total_price = total_price
#         self.order_lines: List[src.entities.order_line.OrderLine] = list()
#
#     def map_row(self, row) -> TableBase:
#         self.id = row[0]
#         self.customer_id = row[1]
#         self.create_date = TableBase.float_to_datetime(row[2])
#         self.order_status_id = row[3]
#         self.total_price = row[4]
#         return self
#
#     def get_insert_params(self) -> {}:
#         return {"customerid": self.customer_id, "createdate": TableBase.datetime_to_float(self.create_date),
#                 "orderstatusid": self.order_status_id, "totalprice": self.total_price}
#
#     def get_update_params(self) -> {}:
#         return {"customerid": self.customer_id, "createdate": TableBase.datetime_to_float(self.create_date),
#                 "orderstatusid": self.order_status_id, "totalprice": self.total_price, "id": self.id}
#
#     # end-autogenerated
#
#     def calc_price(self):
#         self.total_price = sum([ol.price * ol.quantity for ol in self.order_lines])
